import java.awt.BorderLayout;
import java.awt.EventQueue;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

public class EmployeeProjectDuration {
    private static final String FILE_PATH = "employee_data.csv";
    private static final String[] COLUMN_NAMES = {"Employee ID #1", "Employee ID #2", "Project ID", "Days worked"};
    private static final DateTimeFormatter[] DATE_FORMATS = {
        DateTimeFormatter.ofPattern("yyyy-MM-dd"),
        DateTimeFormatter.ofPattern("yyyy/MM/dd"),
        DateTimeFormatter.ofPattern("dd-MM-yyyy"),
        DateTimeFormatter.ofPattern("dd/MM/yyyy"),
        DateTimeFormatter.ofPattern("MM/dd/yyyy")
    };
    
    private static class Project {
        int empId;
        int projectId;
        LocalDate dateFrom;
        LocalDate dateTo;
        
        public Project(int empId, int projectId, LocalDate dateFrom, LocalDate dateTo) {
            this.empId = empId;
            this.projectId = projectId;
            this.dateFrom = dateFrom;
            this.dateTo = dateTo;
        }
    }
    
    public static void main(String[] args) {
        List<Project> projects = readCsvFile(FILE_PATH);
        Project longestPair = findLongestWorkingPair(projects);
        
        SwingUtilities.invokeLater(() -> {
            createAndShowGUI(projects, longestPair);
        });
    }
    
    private static List<Project> readCsvFile(String filePath) {
        List<Project> projects = new ArrayList<>();
        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = br.readLine()) != null) {
                if (line.startsWith("EmpID")) continue; // skip header row
                String[] values = line.split(",");
                int empId = Integer.parseInt(values[0].trim());
                int projectId = Integer.parseInt(values[1].trim());
                LocalDate dateFrom = null;
                LocalDate dateTo = null;
                for (DateTimeFormatter formatter : DATE_FORMATS) {
                    try {
                        dateFrom = LocalDate.parse(values[2].trim(), formatter);
                        break;
                    } catch (Exception e) {
                        // ignore
                    }
                }
                if (values.length > 3 && !values[3].trim().equalsIgnoreCase("NULL")) {
                    for (DateTimeFormatter formatter : DATE_FORMATS) {
                        try {
                            dateTo = LocalDate.parse(values[3].trim(), formatter);
                            break;
                        } catch (Exception e) {
                            // ignore
                        }
                    }
                }
                projects.add(new Project(empId, projectId, dateFrom, dateTo));
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return projects;
    }
    
    private static Project findLongestWorkingPair(List<Project> projects) {
        int longestDuration = 0;
        Project longestPair = null;
        for (int i = 0; i < projects.size(); i++) {
            for (int j = i+1; j < projects.size(); j++) {
                Project p1 = projects.get(i);
                Project p2 = projects.get(j);
                if (p1.projectId == p2.projectId) { // common project
                    LocalDate start = p1.dateFrom.isAfter(p2.dateFrom)
